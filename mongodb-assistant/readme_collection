# insert
db.mongodb_collection.insert([
    {
        "_id" : 0,
        "double" : 0.0,
        "string" : "String_0",
        "array" : [
            "繁體中文字串測試_0",
            "其他不相關字串_0",
            "text_0"
        ],
        "binData" : BinData(0,"AQID"),
        "objectId" : ObjectId("58463b0aa33dac208c802f20"),
        "bool" : true,
        "date" : ISODate("2016-12-06T04:14:02.210Z"),
        "ttl" : new Date(),
        "null" : null,
        "int" : 0,
        "long" : NumberLong(0),
        "document" : {
            "_id" : ObjectId("58463b0aa33dac208c802f00"),
            "key_0" : "value_0_0",
            "key_1" : "value_0_1",
            "key_2" : "value_0_2"
        },
        "documents" : [
            {
                "_id" : ObjectId("58463b0aa33dac208c802f01"),
                "key_0" : "value_0_0_0",
                "key_1" : "value_0_0_1",
                "key_2" : "value_0_0_2"
            },
            {
                "_id" : ObjectId("58463b0aa33dac208c802f02"),
                "key_0" : "value_0_1_0",
                "key_1" : "value_0_1_1",
                "key_2" : "value_0_1_2"
            }
        ],
        "pointLocation" : {
            "type" : "Point",
            "coordinates" : [
                120,
                23.5
            ]
        }
    },
    {
        "_id" : 1,
        "double" : 1.1,
        "string" : "String_1",
        "array" : [
            "繁體中文字串測試_1",
            "其他不相關字串_1",
            "text_1"
        ],
        "binData" : BinData(0,"AQID"),
        "objectId" : ObjectId("58463b0aa33dac208c802f21"),
        "bool" : false,
        "date" : ISODate("2016-12-06T04:14:02.211Z"),
        "ttl" : new Date(),
        "null" : null,
        "int" : 1,
        "long" : NumberLong(1),
        "document" : {
            "_id" : ObjectId("58463b0aa33dac208c802f10"),
            "key_0" : "value_1_0",
            "key_1" : "value_1_1",
            "key_2" : "value_1_2"
        },
        "documents" : [
            {
                "_id" : ObjectId("58463b0aa33dac208c802f11"),
                "key_0" : "value_1_0_0",
                "key_1" : "value_1_0_1",
                "key_2" : "value_1_0_2"
            },
            {
                "_id" : ObjectId("58463b0aa33dac208c802f12"),
                "key_0" : "value_1_1_0",
                "key_1" : "value_1_1_1",
                "key_2" : "value_1_1_2"
            }
        ],
        "pointLocation" : {
            "type" : "Point",
            "coordinates" : [
                121,
                23.5
            ]
        }
    }
])

# find
db.mongodb_collection.find().next()
db.mongodb_collection.find().toArray()
db.mongodb_collection.find().pretty()
db.mongodb_collection.find(
    {}, 
    { 
        "_id" : 1,
        "string" : 1
    }
).pretty()
db.mongodb_collection.find({ 
    "document.key_0" : "value_1_0" 
}).pretty()
db.mongodb_collection.find({ 
    "array" : "繁體中文字串測試_0"
}).pretty()
db.mongodb_collection.find({ 
    "array.0" : "繁體中文字串測試_0"
}).pretty()
db.mongodb_collection.find({
    "double" : 0.0,
    "string" : "string_0"
}).pretty()
db.mongodb_collection.find({
    "string" : /^str/
}).pretty()
#     $lt / $gt / $lte /$gte
db.mongodb_collection.find({
    "string" : { "$gte" : "string_1" }
}).pretty()
db.mongodb_collection.find({
    "double" : { 
        "$gt" : 1,
        "$lt" : 2
    }
}).pretty()
#     $in / $all / $nin
db.mongodb_collection.find({
    "string" : { "$in" : ["string_1", "string_2", "string_3"] }
}).pretty()
#     $ne / $not / $or / $nor / $and / $exists
db.mongodb_collection.find({
    "double" : {
        "$not" : { "$gte" : 1.1 }
    }
}).pretty()
db.mongodb_collection.find({
    $and : [
        { "double" : 0.0 },
        { "string" : "string_0" }
    ]
}).pretty()
db.mongodb_collection.find({
    $or : [
        { "double" : 0.0 },
        { "string" : "string_1" }
    ]
}).pretty()
db.mongodb_collection.find({
    "null" : { "$exists" : true }
}).pretty()
#     $elemMatch / $size
db.mongodb_collection.find({
    "documents" : { 
        "$elemMatch" : {
                "key_0" : "value_0_1_0",
                "key_2" : "value_0_1_2"
        }
    }
}).pretty()
db.mongodb_collection.find({
    "documents" : { 
        "$size" : 2
    }
}).pretty()
#    $where
db.mongodb_collection.find({
    "$where" : "function() { return this.string == 'string_1' }"
}).pretty()
db.mongodb_collection.find({
    "$where" : "this.string == 'string_1'"
}).pretty()
#     $regex
db.mongodb_collection.find({
    "string" : {
        "$regex" : "^STR",
        "$options" : "i"
    }
}).pretty()
#     $mod / $type / $text
db.mongodb_collection.find({
    "int" : { 
        "$mod" : [2, 0]
    }
}).pretty()
db.mongodb_collection.find({
    "double" : { "$type" : 1 }
}).pretty()
#     $slice
db.mongodb_collection.find(
    {},
    { 
        "array" : { "$slice" : 2 } 
    }
).pretty()
db.mongodb_collection.find(
    {},
    { 
        "array" : { "$slice" : [1, 2] } 
    }
).pretty()
db.mongodb_collection.find({
    "null" : null
}).limit(1).pretty()
db.mongodb_collection.find({
    "null" : null
}).skip(1).pretty()
db.mongodb_collection.find({
    "null" : null
}).sort({
    "_id" : -1
}).pretty()
db.mongodb_collection.find().forEach(function(doc) {
    doc.newAttribute="newAttribute";
    db.mongodb_forEach.insert(doc) 
})
db.mongodb_collection.findOne({
    "null" : null
})

# aggregation
#     SELECT    :    $project / $group($addToSet, $first, $last, $max, $min, $avg, $push, $sum)
#     FROM      :    db.mongodb_collection.aggregate(...)
#     JOIN      :    $unwind
#     WHERE     :    $match
#     ORDER BY  :    $sort
#     GROUP BY  :    $group
#     HAVING    :    $match
#     LIMIT     :    $limit
#     export    :    $out
#     flatten   :    $unwind
#     skip      :    $skip
#     string    :    $concat / $strcasecmp / $substr / $toLower / $toUpper
#     arithmetic:    $add / $divide / $mod / $multiply / $subtract
#     date      :    $dayOfYear / $dayOfMonth / $dayOfWeek / $year / $month / $week / $hour / $minute / $second / $millisecond
#     geo       :    $geoNear
#     ???       :    $redact
db.mongodb_collection.aggregate([
    {
        "$group" : { "_id" : "$null" }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$group" : {
        	"_id" : "$null",
        	"strings" : { "$addToSet" : "$string" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$group" : {
        	"_id" : "$null",
        	"firstString" : { "$first" : "$string" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$group" : {
        	"_id" : "$null",
        	"lastString" : { "$last" : "$string" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$group" : {
        	"_id" : "$null",
        	"maxDouble" : { "$max" : "$double" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$group" : {
        	"_id" : "$null",
        	"minDouble" : { "$min" : "$double" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$group" : {
        	"_id" : "$null",
        	"avgDouble" : { "$avg" : "$double" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$group" : {
        	"_id" : "$null",
        	"pushString" : { "$push" : "$string" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$group" : {
        	"_id" : "$null",
        	"addToSetString" : { "$addToSet" : "$string" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$match" : { 
            "int" : { "$gte" : 0 } 
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$sort" : { 
            "int" : -1 
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$skip" : 1
    }
]).pretty() 
db.mongodb_collection.aggregate([
    {
        "$limit" : 1
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$unwind" : "$array"
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$out" : "mongodb_out"
    },    
])
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "string" : 1,
            "int" : 1
        }
    },    
])
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "concatString" : { "$concat" : [ "--", "$string" , "--" ] }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "strcasecmpString" : { "$strcasecmp" : [ "$string" , "STRING_0" ] }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "substrString" : { "$substr" : [ "$string" , 2, 1 ] }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "toLowerString" : { "$toLower" : "$string" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "toUpperString" : { "$toUpper" : "$string" }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "addDouble" : { "$add" : [ "$double", 3 ] }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "divideDouble" : { "$divide" : [ "$double", 3 ] }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "modDouble" : { "$mod" : [ "$double", 3 ] }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "multiplyDouble" : { "$multiply" : [ "$double", 3 ] }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "subtractDouble" : { "$subtract" : [ "$double", 3 ] }
        }
    }
]).pretty()

# count
db.mongodb_collection.count()

# update
#    only update single document
db.mongodb_collection.update(
    { "null" : null }, 
    {
        $set : {
            "null" : "not null"
        }
    }
)
db.mongodb_collection.update(
    { "null" : null },
    {
        $addToSet : { "array" : "text_0" }
    }
)
db.mongodb_collection.update(
    { "null" : null }, 
    { "null" : "not null" }
)
db.mongodb_collection.update(
    { "null" : null }, 
    {
        $unset : {
            "null" : 1
        }
    }
)
#    update all document
db.mongodb_collection.update(
    { "null" : null },
    {
        $addToSet : { "array" : "text_0" }
    },
    false,
    true
)

# rename
db.mongodb_collection.renameCollection("rename_collection")

# remove
db.mongodb_collection.remove({})

# drop
db.mongodb_collection.drop()

# index
db.mongodb_collection.createIndex(
    { string: 1 }
)
db.mongodb_collection.createIndex(
    { ttl: 1 },
    { expireAfterSeconds: 10 }
)

db.mongodb_collection.createIndex(
    { long: 1 }, 
    { unique : true }
)
db.mongodb_collection.getIndexes()

# status
db.mongodb_collection.stats()

# explain
db.mongodb_collection.find({
    "double" : 0.0,
    "string" : "string_0"
}).explain("executionStats")

# help
db.mongodb_collection.help()

# system info
db.system.indexes.find()

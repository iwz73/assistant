db.mongodb_collection.aggregate(
    [
        {
            "$match" : { 
                "int" : { "$gte" : 0 } 
            }
        }
    ],
    {
        "explain" : true,
        "allowDiskUse" : true,
        "cursor" : { "batchSize" : 1 }
    }
)

# Stage Operators
#     $collStats
#     $project     :    SELECT
#     $match       :    WHERE
#     $redact ($$DESCEND / $$PRUNE / $$KEEP)
#     $limit       :    LIMIT
#     $skip        :    SKIP
#     $unwind      :    JOIN
#     $group       :    GROUP BY
#     $sample
#     $sort        :    ORDER BY
#     $geoNear
#     $lookup
#     $out         :    EXPORT
#     $indexStats
#     $facet
#     $bucket
#     $bucketAuto
#     $sortByCount
#     $addFields
#     $replaceRoot
#     $count
#     $graphLookup
#     

db.mongodb_collection.aggregate([
    {
        "$collStats" : {
            "latencyStats" : {
                "histograms" : true
            },
            "storageStats" : {}
        }
    }
]).pretty()
{
  $collStats:
    {
      "latencyStats" : {
          histograms" : true
      },
      "latencyStats.histograms" : true,
      "storageStats" : {}
    }
}


db.mongodb_collection.aggregate([
    {
        "$project" : {
            "string" : 1,
            "int" : 1
        }
    },    
])
db.mongodb_collection.aggregate([
    {
        "$match" : { 
            "int" : { "$gt" : 0 } 
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        $redact: {
            $cond: {
                if: {
                    "$or" : [
                        { "$eq" : [ "$string", "string_0" ] },
                        { "$eq" : [ "$key_0", "value_0_0_0" ] }
                    ]    
                },
                then: "$$DESCEND",
                else: "$$PRUNE"
            }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$limit" : 1
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$skip" : 1
    }
]).pretty() 
db.mongodb_collection.aggregate([
    {
        "$unwind" : "$array"
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$group" : { "_id" : "$null" }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$sample" : { "size" : 10 }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$sort" : { 
            "int" : -1 
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$geoNear" : { 
            spherical: true,
            near: { type: "Point", coordinates: [ 120, 23.5 ] },
            distanceField: "dist.calculated",
            includeLocs: "dist.location",
            maxDistance: 1,
            num: 10
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$lookup" : { 
            "localField" : "string",
            "from" : "mongodb_collection_1",
            "foreignField" : "string_1",
            "as" : "lookup"
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$out" : "mongodb_out"
    }
])
db.mongodb_collection.aggregate([
    {
        "$indexStats" : {}
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$facet" : {
            "sortByCount": [
                { $unwind: "$array" },
                { $sortByCount: "$array" }
            ],
            "bucket": [
            	{
			        "$match" : { 
			            "null" : null
			        }
            	},
                {
                	"$bucket" : {
	                    "groupBy" : "$double",
	                    "boundaries" : [ 0, 1, 2, 3 ],
	                    "default" : "other",
	                    "output" : {
	                        "sum": { "$sum" : 1 },
	                        "ints": { $push: "$int" }
	                    }
	                }
                }
            ],
			"bucketAuto" : [
				{
					"$bucketAuto" : {
						"groupBy" : "$int",
						"buckets" : 2
					}
				}
			]
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
    	"$bucket" : {
            "groupBy" : "$double",
            "boundaries" : [ 0, 1, 2, 3 ],
            "default" : "other",
            "output" : {
                "sum": { "$sum" : 1 },
                "ints": { $push: "$int" }
            }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
		"$bucketAuto" : {
			"groupBy" : "$int",
			"buckets" : 2
		}
    }
]).pretty()

aaa


# Boolean Operators ( $and / $or / $not )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "and" : { "$and" : [ true, true, true ] },
            "or" : { "$or" : [ false, false, true ] },
            "not" : { "$not" : true }
        }
    }
]).pretty()

# Set Operators ( $setEquals / $setIntersection / $setUnion / $setDifference / $setIsSubset / $anyElementTrue / $allElementsTrue )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "setEquals" : { "$setEquals" : [ "$array", ["繁體中文字串測試_0","其他不相關字串_0","text_0"] ] },
            "setIntersection" : { "$setIntersection" : [ "$array", ["繁體中文字串測試_0","其他不相關字串_0","text_0"] ] },
            "setUnion" : { "$setUnion" : [ "$array", ["繁體中文字串測試_0","其他不相關字串_0","text_0"] ] },
            "setDifference" : { "$setDifference" : [ "$array", ["繁體中文字串測試_0","其他不相關字串_0","text_0"] ] },
            "setIsSubset" : { "$setIsSubset" : [ "$array", ["繁體中文字串測試_0","其他不相關字串_0","text_0","other_0"] ] },
            "anyElementTrue" : { "$anyElementTrue" : [ [ false, false, true ] ] },
            "allElementsTrue" : { "$allElementsTrue" : [ [ true, true, true ] ] }
        }
    }
]).pretty()

# Comparison Operators ( $cmp / $eq / $gt / $gte / $lt / $lte / $ne )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "cmp" : { "$cmp" : [ "$double", 1.1 ] },
            "eq" : { "$eq" : [ "$double", 1.1 ] },
            "gt" : { "$gt" : [ "$double", 1 ] },
            "gte" : { "$gte" : [ "$double", 1 ] },
            "lt" : { "$lt" : [ "$double", 1 ] },
            "lte" : { "$lte" : [ "$double", 1 ] },
            "ne" : { "$ne" : [ "$double", 1.1 ] }
        }
    }
]).pretty()

# Arithmetic Operators ( $add / $subtract / $multiply / $divide / $mod )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "addDouble" : { "$add" : [ "$double", 3 ] },
            "subtractDouble" : { "$subtract" : [ "$double", 3 ] },
            "multiplyDouble" : { "$multiply" : [ "$double", 3 ] },           
            "divideDouble" : { "$divide" : [ "$double", 3 ] },
            "modDouble" : { "$mod" : [ "$double", 3 ] }
        }
    }
]).pretty()

# String Operators ( $concat / $substr / $toLower / $toUpper / $strcasecmp )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "concatString" : { "$concat" : [ "--", "$string" , "--" ] },
            "substrString" : { "$substr" : [ "$string" , 2, 1 ] },
            "toLowerString" : { "$toLower" : "$string" },
            "toUpperString" : { "$toUpper" : "$string" },
            "strcasecmpString" : { "$strcasecmp" : [ "$string" , "STRING_0" ] }
        }
    }
]).pretty()

# Text Search Operators ( $meta )
db.mongodb_collection.aggregate([
    {
        "$match" : { 
            "$text" : { "$search" : "string_1" }
        }
    },
    {
        "$project" : {
            "meta" : { "$meta" : "textScore" }
        }
    }
]).pretty()

# Array Operators ( $size )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "size" : { "$size" : "$array" }
        }
    }
]).pretty()

# Variable Operators ( $map / $let )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "map" : { 
                "$map" : {
                    input : "$array",
                    as : "item",
                    in : { "$concat" : [ "--", "$$item" , "--" ] }
                }
            }
        }
    }
]).pretty()
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "let" : { 
                "$let" : {
                    vars : {
                        "newInt" : "$int",
                        "newDouble" : "$double"
                    },
                    in : { "$add" : [ "$$newInt", "$$newDouble" ] }
                }
            }
        }
    }
]).pretty()

# Literal Operators ( $literal )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "literal" : { 
                "$literal" : "$string"
            }
        }
    }
]).pretty()

# Date Operators ( $dayOfYear / $dayOfMonth / $dayOfWeek / $year / $month / $week / $hour / $minute / $second / $millisecond / $dayToString )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "dayOfYear" : { "$dayOfYear" : "$date" },
            "dayOfMonth" : { "$dayOfMonth" : "$date" },
            "dayOfWeek" : { "$dayOfWeek" : "$date" },
            "year" : { "$year" : "$date" },
            "month" : { "$month" : "$date" },
            "week" : { "$week" : "$date" },
            "hour" : { "$hour" : "$date" },
            "minute" : { "$minute" : "$date" },
            "second" : { "$second" : "$date" },
            "millisecond" : { "$millisecond" : "$date" },
            "dayToString" : { $dateToString: { format: "%Y-%m-%d %H:%M:%S.%L dayOfYear(%j), dayOfWeek(%w), weekOfYear(%U)", date: "$date" } }
        }
    }
]).pretty()

# Conditional Expressions ( $cond / $ifNull )
db.mongodb_collection.aggregate([
    {
        "$project" : {
            "cond" : { 
                $cond : { 
                    if: true, 
                    then: "Y" ,
                    else: "N"
                }
            },
            "ifNull" : { "$ifNull" : [ "$null", "if null" ] }
        }
    }
]).pretty()

# Accumulators ( $sum / $avg / $first / $last / $max / $min / $push / $addToSet )
db.mongodb_collection.aggregate([
    {
        "$group" : {
            "_id" : "$null",
            "sumDouble" : { "$sum" : "$double" },
            "avgDouble" : { "$avg" : "$double" },
            "firstString" : { "$first" : "$string" },
            "lastString" : { "$last" : "$string" },
            "maxDouble" : { "$max" : "$double" },
            "minDouble" : { "$min" : "$double" },
            "pushString" : { "$push" : "$string" },
            "addToSetString" : { "$addToSet" : "$string" }
        }
    }
]).pretty()


/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package idv.hsiehpinghan.nutch.storage;
@SuppressWarnings("all")
public class Seed extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Seed\",\"namespace\":\"idv.hsiehpinghan.nutch.storage\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"score\",\"type\":\"float\",\"default\":0.0},{\"name\":\"fetchInterval\",\"type\":\"int\",\"default\":0},{\"name\":\"createdBy\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"createdDt\",\"type\":\"long\",\"default\":0}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    NAME(0, "name"),
    STATUS(1, "status"),
    SCORE(2, "score"),
    FETCH_INTERVAL(3, "fetchInterval"),
    CREATED_BY(4, "createdBy"),
    CREATED_DT(5, "createdDt"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "name",
  "status",
  "score",
  "fetchInterval",
  "createdBy",
  "createdDt",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return Seed._ALL_FIELDS.length;
  }

  private java.lang.CharSequence name;
  private java.lang.CharSequence status;
  private float score;
  private int fetchInterval;
  private java.lang.CharSequence createdBy;
  private long createdDt;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return status;
    case 2: return score;
    case 3: return fetchInterval;
    case 4: return createdBy;
    case 5: return createdDt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)(value); break;
    case 1: status = (java.lang.CharSequence)(value); break;
    case 2: score = (java.lang.Float)(value); break;
    case 3: fetchInterval = (java.lang.Integer)(value); break;
    case 4: createdBy = (java.lang.CharSequence)(value); break;
    case 5: createdDt = (java.lang.Long)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'name' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isNameDirty() {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'status' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStatusDirty() {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'score' field.
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * Sets the value of the 'score' field.
   * @param value the value to set.
   */
  public void setScore(java.lang.Float value) {
    this.score = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'score' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isScoreDirty() {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'fetchInterval' field.
   */
  public java.lang.Integer getFetchInterval() {
    return fetchInterval;
  }

  /**
   * Sets the value of the 'fetchInterval' field.
   * @param value the value to set.
   */
  public void setFetchInterval(java.lang.Integer value) {
    this.fetchInterval = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'fetchInterval' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFetchIntervalDirty() {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'createdBy' field.
   */
  public java.lang.CharSequence getCreatedBy() {
    return createdBy;
  }

  /**
   * Sets the value of the 'createdBy' field.
   * @param value the value to set.
   */
  public void setCreatedBy(java.lang.CharSequence value) {
    this.createdBy = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'createdBy' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isCreatedByDirty() {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'createdDt' field.
   */
  public java.lang.Long getCreatedDt() {
    return createdDt;
  }

  /**
   * Sets the value of the 'createdDt' field.
   * @param value the value to set.
   */
  public void setCreatedDt(java.lang.Long value) {
    this.createdDt = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'createdDt' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isCreatedDtDirty() {
    return isDirty(5);
  }

  /** Creates a new Seed RecordBuilder */
  public static idv.hsiehpinghan.nutch.storage.Seed.Builder newBuilder() {
    return new idv.hsiehpinghan.nutch.storage.Seed.Builder();
  }
  
  /** Creates a new Seed RecordBuilder by copying an existing Builder */
  public static idv.hsiehpinghan.nutch.storage.Seed.Builder newBuilder(idv.hsiehpinghan.nutch.storage.Seed.Builder other) {
    return new idv.hsiehpinghan.nutch.storage.Seed.Builder(other);
  }
  
  /** Creates a new Seed RecordBuilder by copying an existing Seed instance */
  public static idv.hsiehpinghan.nutch.storage.Seed.Builder newBuilder(idv.hsiehpinghan.nutch.storage.Seed other) {
    return new idv.hsiehpinghan.nutch.storage.Seed.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for Seed instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Seed>
    implements org.apache.avro.data.RecordBuilder<Seed> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence status;
    private float score;
    private int fetchInterval;
    private java.lang.CharSequence createdBy;
    private long createdDt;

    /** Creates a new Builder */
    private Builder() {
      super(idv.hsiehpinghan.nutch.storage.Seed.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(idv.hsiehpinghan.nutch.storage.Seed.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Seed instance */
    private Builder(idv.hsiehpinghan.nutch.storage.Seed other) {
            super(idv.hsiehpinghan.nutch.storage.Seed.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.score)) {
        this.score = (java.lang.Float) data().deepCopy(fields()[2].schema(), other.score);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fetchInterval)) {
        this.fetchInterval = (java.lang.Integer) data().deepCopy(fields()[3].schema(), other.fetchInterval);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdBy)) {
        this.createdBy = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.createdBy);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.createdDt)) {
        this.createdDt = (java.lang.Long) data().deepCopy(fields()[5].schema(), other.createdDt);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'status' field */
    public java.lang.CharSequence getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'status' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder clearStatus() {
      status = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'score' field */
    public java.lang.Float getScore() {
      return score;
    }
    
    /** Sets the value of the 'score' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder setScore(float value) {
      validate(fields()[2], value);
      this.score = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'score' field has been set */
    public boolean hasScore() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'score' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder clearScore() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'fetchInterval' field */
    public java.lang.Integer getFetchInterval() {
      return fetchInterval;
    }
    
    /** Sets the value of the 'fetchInterval' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder setFetchInterval(int value) {
      validate(fields()[3], value);
      this.fetchInterval = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'fetchInterval' field has been set */
    public boolean hasFetchInterval() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'fetchInterval' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder clearFetchInterval() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'createdBy' field */
    public java.lang.CharSequence getCreatedBy() {
      return createdBy;
    }
    
    /** Sets the value of the 'createdBy' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder setCreatedBy(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.createdBy = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'createdBy' field has been set */
    public boolean hasCreatedBy() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'createdBy' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder clearCreatedBy() {
      createdBy = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'createdDt' field */
    public java.lang.Long getCreatedDt() {
      return createdDt;
    }
    
    /** Sets the value of the 'createdDt' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder setCreatedDt(long value) {
      validate(fields()[5], value);
      this.createdDt = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'createdDt' field has been set */
    public boolean hasCreatedDt() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'createdDt' field */
    public idv.hsiehpinghan.nutch.storage.Seed.Builder clearCreatedDt() {
      fieldSetFlags()[5] = false;
      return this;
    }
    
    @Override
    public Seed build() {
      try {
        Seed record = new Seed();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.score = fieldSetFlags()[2] ? this.score : (java.lang.Float) defaultValue(fields()[2]);
        record.fetchInterval = fieldSetFlags()[3] ? this.fetchInterval : (java.lang.Integer) defaultValue(fields()[3]);
        record.createdBy = fieldSetFlags()[4] ? this.createdBy : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.createdDt = fieldSetFlags()[5] ? this.createdDt : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public Seed.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public Seed newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends Seed implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'name' field.
		   */
	  public java.lang.CharSequence getName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'name' field.
		   * @param value the value to set.
	   */
	  public void setName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'name' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isNameDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'status' field.
		   */
	  public java.lang.CharSequence getStatus() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'status' field.
		   * @param value the value to set.
	   */
	  public void setStatus(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'status' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStatusDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'score' field.
		   */
	  public java.lang.Float getScore() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'score' field.
		   * @param value the value to set.
	   */
	  public void setScore(java.lang.Float value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'score' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isScoreDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fetchInterval' field.
		   */
	  public java.lang.Integer getFetchInterval() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fetchInterval' field.
		   * @param value the value to set.
	   */
	  public void setFetchInterval(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fetchInterval' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFetchIntervalDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'createdBy' field.
		   */
	  public java.lang.CharSequence getCreatedBy() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'createdBy' field.
		   * @param value the value to set.
	   */
	  public void setCreatedBy(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'createdBy' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isCreatedByDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'createdDt' field.
		   */
	  public java.lang.Long getCreatedDt() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'createdDt' field.
		   * @param value the value to set.
	   */
	  public void setCreatedDt(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'createdDt' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isCreatedDtDirty() {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

